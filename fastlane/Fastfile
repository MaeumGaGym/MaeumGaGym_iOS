# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:ios)

platform :ios do
  
  ### Demo

  desc 'Set Marketing and Build version'
  lane :set_version_demo do |version|
    increment_version_number(
      version_number: version[:version],
      xcodeproj: "./Projects/Demo/MaeumGaGym-iOS-Demo.xcodeproj"
    )
  
    increment_build_number(
      build_number: Time.new.strftime("%Y.%m%d.%H%M"), # 2023.0524.2100
      xcodeproj: "./Projects/Demo/MaeumGaGym-iOS-Demo.xcodeproj"
    )
  end

  desc "Demo App Testflight Upload"
  lane :upload_testflight_demo do |version|
    version = version[:version]

    match(
      type: "appstore",
      app_identifier: 'com.maeumGaGym-health-iOS.test',
      readonly: true
    )

    if version
      puts "버전 정보: #{version}"
      set_version_demo(version: version)
    else 
      puts "버전 입력 X"
      increment_build_number(
        build_number: Time.new.strftime("%Y.%m%d.%H%M"), # 2023.0524.2100
        xcodeproj: "./Projects/Demo/MaeumGaGym-iOS-Demo.xcodeproj"
      )
    end

    build_app(
      output_directory:"./BuildOutputs/Demo",
      scheme: "MaeumGaGym-iOS-Demo"
    )

    upload_to_testflight(skip_waiting_for_build_processing: true)
  end

  ### Release

  desc 'Set Marketing and Build version'
  lane :set_version do |version|
    increment_version_number(
      version_number: version[:version],
      xcodeproj: "./Projects/MaeumGaGym-iOS/MaeumGaGym-iOS.xcodeproj"
    )
  
    increment_build_number(
      build_number: Time.new.strftime("%Y.%m%d.%H%M"), # 2023.0524.2100
      xcodeproj: "./Projects/MaeumGaGym-iOS/MaeumGaGym-iOS.xcodeproj"
    )
  end

  desc "Prod App Testflight Upload"
  lane :upload_testflight do |version|
    version = version[:version]

    match(
      type: "appstore",
      app_identifier: ['com.maeumGaGym-health-iOS.release'],
      readonly: true
    )

    if version
      puts "버전 정보: #{version}"
      set_version(version: version)
    else 
      puts "버전 입력 X"
      increment_build_number(
        build_number: Time.new.strftime("%Y.%m%d.%H%M"), # 2023.0524.2100
        xcodeproj: "./Projects/MaeumGaGym-iOS/MaeumGaGym-iOS.xcodeproj"
      )
    end

    build_app(
      output_directory:"./BuildOutputs/Prod",
      scheme: "MaeumGaGym-iOS-PROD"
    )

    upload_to_testflight(skip_waiting_for_build_processing: true)

    sentry_upload_dif(
      auth_token: ENV["SENTRY_AUTH_TOKEN"], # Do not use if using api_key
      org_slug: 'maeumGaGym-1a',
      project_slug: 'maeumGaGym-ios',
      path: './BuildOutputs/Prod' # Optional. Defaults to '.' when no value is provided. Path(s) can be a string, a comma-separated string, or an array of strings.
    )
  end

  ### Device Management

  desc "Register Devices"
  lane :register_new_device do  |options|
    device_name = prompt(text: "Enter the device name: ")
    device_udid = prompt(text: "Enter the device UDID: ")
    device_hash = {}
    device_hash[device_name] = device_udid
    register_devices(devices: device_hash)
    match(type: "development", force_for_new_devices: true)
  end

  ### Test

  lane :test_scheme do |options|
    run_tests(
      scheme: options[:scheme],
      device: "iPhone 15 Pro Max",
      code_coverage: true
    )
  end

  desc "Run unit/ui tests for App"
  lane :test_app do
    run_tests(
      scheme: "SMaeumGaGym-iOS-DEV",
      device: "iPhone 15 Pro Max",
      code_coverage: true
    )
  end

  desc "Run unit/ui tests for demo App"
  lane :test_demoApp do
    run_tests(
      scheme: "MaeumGaGym-iOS-Test",
      device: "iPhone 15 Pro Max",
      code_coverage: true
    )
  end

  desc "Run tests for feature schemes"
  lane :test_features do

    schemes = [
      "AuthFeature", "HomeFeature", "PickleFeature", "PostureFeature", "SelfCareFeature", "ShopFeature"
    ]

    test_results = []

    schemes.each do |scheme|
      begin
        run_tests(
          scheme: scheme,
          device: "iPhone 15 Pro Max",
          code_coverage: true
        )
        # 테스트 성공 결과 저장
        test_results << {scheme: scheme, status: "Success"}
      rescue => ex
        # 테스트 실패 결과 저장
        test_results << {scheme: scheme, status: "Failed", error: ex}
      end
    end

    # 모든 테스트가 완료된 후 결과 출력
    puts "Test Results:"
    test_results.each do |result|
      status = result[:status]
      scheme = result[:scheme]
      if status == "Success"
        puts "#{scheme}: #{status}"
      else
        puts "#{scheme}: #{status} - #{result[:error]}"
      end
    end
  end

  ### Projects

  desc "Regenerate tuist Projects with the specified version"
  lane :regenerate do |version|

    Dir.chdir("../") do
      sh("make regenerate")
    end

    set_version(version: version[:version])
    set_version_demo(version: version[:version])
  end

  desc "Initial Setting For Projects"
  lane :start_project do |version|

    Dir.chdir("../") do
      github_access_token = prompt(text: "Enter your GitHub access token: ")
      sh("make download-privates token=#{github_access_token}")
      apple_id = prompt(text: "Enter your Apple ID: ")
      app_password = prompt(text: "Enter your App Password")
      sh("make update_apple_id email=#{apple_id} app_password=#{app_password}")
      sh("tuist fetch")
      sh("fastlane install_plugins")
    end
    
    regenerate(version: version[:version])

    match_read_only
  end

  ### Match

  desc "Match all code signing"
  lane :match_read_only do
    match(
      type: "appstore",
      app_identifier: ['com.maeumGaGym-health-iOS.test', 'com.maeumGaGym-health-iOS.release'],
      readonly: true
    )

    match(
      type: "development",
      app_identifier: ['com.maeumGaGym-health-iOS.test', 'com.maeumGaGym-health-iOS.release'],
      readonly: true
    )
  end
end
